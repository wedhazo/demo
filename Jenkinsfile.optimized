pipeline {
    agent {
        docker {
            image 'maven:3.9.9-eclipse-temurin-17'
            args '-v /root/.m2:/root/.m2'
        }
    }
    
    // Global environment variables
    environment {
        // Docker registry configuration
        REGISTRY = 'ghcr.io'
        IMAGE_NAME = 'wedhazo/demo'
        
        // Maven configuration
        MAVEN_OPTS = '-Dmaven.repo.local=/root/.m2/repository -Xmx1024m'
        
        // Mule environment
        MULE_ENV = 'dev'
        
        // Credentials (Jenkins will inject these securely)
        DB_PASSWORD = credentials('db-password')
        GITHUB_TOKEN = credentials('github-token')
    }
    
    // Pipeline options
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 45, unit: 'MINUTES')
        timestamps()
        skipDefaultCheckout(false)
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out code from GitHub..."
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(7)
                    env.DOCKER_TAG = "${env.GIT_COMMIT_SHORT}"
                    env.FULL_IMAGE_NAME = "${REGISTRY}/${IMAGE_NAME}:${env.DOCKER_TAG}"
                }
                echo "üì¶ Building image: ${env.FULL_IMAGE_NAME}"
            }
        }
        
        stage('MUnit Tests') {
            steps {
                echo "üß™ Running MUnit tests with coverage enforcement..."
                script {
                    withEnv([
                        "DB_PASSWORD=${env.DB_PASSWORD}",
                        "MULE_ENV=test"
                    ]) {
                        sh '''
                            echo "Running MUnit tests with coverage ‚â• 80%"
                            mvn clean test \
                                -Dmule.env=test \
                                -Dmaven.repo.local=/root/.m2/repository \
                                -Dtest=**/munit/**/*test* \
                                -DfailIfNoTests=false
                        '''
                    }
                }
            }
            post {
                always {
                    // Publish test results
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml', allowEmptyResults: true
                    
                    // Archive coverage reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target/site/munit/coverage',
                        reportFiles: 'index.html',
                        reportName: 'MUnit Coverage Report',
                        reportTitles: ''
                    ])
                    
                    // Archive MUnit reports
                    archiveArtifacts artifacts: 'target/site/munit/coverage/**/*', allowEmptyArchive: true
                }
                failure {
                    echo "‚ùå MUnit tests failed - check coverage requirements (‚â•80%)"
                }
            }
        }
        
        stage('Build JAR') {
            steps {
                echo "üèóÔ∏è Building deployable Mule application JAR..."
                script {
                    withEnv([
                        "DB_PASSWORD=${env.DB_PASSWORD}",
                        "MULE_ENV=${env.MULE_ENV}"
                    ]) {
                        sh '''
                            echo "Building Mule application JAR"
                            mvn clean package \
                                -Dmule.env=$MULE_ENV \
                                -Dmaven.repo.local=/root/.m2/repository \
                                -DskipTests=true
                        '''
                    }
                }
            }
            post {
                always {
                    // Archive build artifacts
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, allowEmptyArchive: false
                    
                    // Verify JAR was created
                    script {
                        def jarFile = sh(script: 'ls target/*.jar 2>/dev/null || echo "NO_JAR"', returnStdout: true).trim()
                        if (jarFile == "NO_JAR") {
                            error("‚ùå Failed to create application JAR")
                        } else {
                            echo "‚úÖ Created JAR: ${jarFile}"
                        }
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo "üê≥ Building Docker image..."
                script {
                    sh """
                        # Install Docker in the Maven container
                        apt-get update && apt-get install -y docker.io
                        
                        # Build Docker image with build args
                        docker build \
                            --build-arg DB_PASSWORD='${env.DB_PASSWORD}' \
                            --build-arg MULE_ENV='${env.MULE_ENV}' \
                            -f Dockerfile.simulator \
                            -t ${env.FULL_IMAGE_NAME} \
                            -t ${REGISTRY}/${IMAGE_NAME}:latest \
                            .
                    """
                }
            }
        }
        
        stage('Docker Push') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üì§ Pushing Docker image to registry..."
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            echo $GITHUB_TOKEN | docker login ghcr.io -u wedhazo --password-stdin
                            docker push ${FULL_IMAGE_NAME}
                            docker push ${REGISTRY}/${IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "‚ò∏Ô∏è Deploying to Kubernetes..."
                script {
                    withCredentials([
                        file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE'),
                        string(credentialsId: 'db-password', variable: 'K8S_DB_PASSWORD')
                    ]) {
                        sh '''
                            # Install kubectl in Maven container
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            mv kubectl /usr/local/bin/
                            
                            # Setup kubeconfig
                            mkdir -p ~/.kube
                            cp $KUBECONFIG_FILE ~/.kube/config
                            
                            # Verify cluster connection
                            kubectl cluster-info
                            
                            # Create namespace if not exists
                            kubectl create namespace mule-dev --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Create/update secret with DB password
                            kubectl create secret generic mule-db-secret \
                                --from-literal=DB_PASSWORD="$K8S_DB_PASSWORD" \
                                --namespace=mule-dev \
                                --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Update deployment image
                            kubectl set image deployment/mule-trading-app \
                                mule-app=$FULL_IMAGE_NAME \
                                -n mule-dev || echo "Deployment not found, will create with manifests"
                            
                            # Apply all Kubernetes manifests
                            kubectl apply -f k8s/ -n mule-dev
                            
                            # Wait for rollout to complete with timeout
                            echo "‚è≥ Waiting for deployment rollout..."
                            if ! kubectl rollout status deployment/mule-trading-app -n mule-dev --timeout=120s; then
                                echo "‚ùå Deployment rollout failed or timed out"
                                
                                # Get deployment status for debugging
                                kubectl describe deployment mule-trading-app -n mule-dev
                                kubectl get pods -n mule-dev -l app=mule-trading-app
                                
                                # Attempt rollback
                                echo "üîÑ Attempting rollback..."
                                kubectl rollout undo deployment/mule-trading-app -n mule-dev
                                
                                # Wait for rollback
                                kubectl rollout status deployment/mule-trading-app -n mule-dev --timeout=60s
                                
                                error("Deployment failed, rolled back to previous version")
                            fi
                            
                            # Verify deployment
                            kubectl get pods -n mule-dev -l app=mule-trading-app
                            
                            echo "‚úÖ Deployment successful!"
                        '''
                    }
                }
            }
            post {
                failure {
                    script {
                        // Additional rollback on pipeline failure
                        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                            sh '''
                                kubectl rollout undo deployment/mule-trading-app -n mule-dev || echo "Rollback failed"
                                kubectl get pods -n mule-dev -l app=mule-trading-app
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üè• Running post-deployment health checks..."
                script {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                            # Wait for application to be ready
                            sleep 30
                            
                            # Port forward for testing
                            kubectl port-forward -n mule-dev svc/mule-app-service 8085:8081 &
                            PORT_FORWARD_PID=$!
                            
                            # Wait for port forward to establish
                            sleep 10
                            
                            # Test the health endpoint
                            HEALTH_CHECK_PASSED=false
                            for i in {1..5}; do
                                if curl -f -s --max-time 10 http://localhost:8085/kb > /dev/null; then
                                    echo "‚úÖ Health check passed on attempt $i!"
                                    HEALTH_CHECK_PASSED=true
                                    break
                                else
                                    echo "‚ùå Health check failed on attempt $i, retrying..."
                                    sleep 10
                                fi
                            done
                            
                            # Clean up port forward
                            kill $PORT_FORWARD_PID || true
                            
                            if [ "$HEALTH_CHECK_PASSED" = false ]; then
                                echo "‚ùå All health check attempts failed!"
                                
                                # Get logs for debugging
                                kubectl logs -n mule-dev -l app=mule-trading-app --tail=50
                                
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        /* ================== CLOUDHUB DEPLOYMENT (COMMENTED ALTERNATIVE) ==================
        stage('Deploy to CloudHub') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "‚òÅÔ∏è Deploying to CloudHub..."
                script {
                    withCredentials([
                        string(credentialsId: 'anypoint-username', variable: 'ANYPOINT_USERNAME'),
                        string(credentialsId: 'anypoint-password', variable: 'ANYPOINT_PASSWORD'),
                        string(credentialsId: 'anypoint-org', variable: 'ANYPOINT_ORG'),
                        string(credentialsId: 'anypoint-env', variable: 'ANYPOINT_ENV'),
                        string(credentialsId: 'db-password', variable: 'CH_DB_PASSWORD')
                    ]) {
                        sh '''
                            # Install Anypoint CLI
                            npm install -g anypoint-cli@latest
                            
                            # Login to Anypoint Platform
                            anypoint-cli account login \
                                --username $ANYPOINT_USERNAME \
                                --password $ANYPOINT_PASSWORD \
                                --organization $ANYPOINT_ORG
                            
                            # Deploy to CloudHub
                            anypoint-cli runtime-mgr cloudhub-application deploy \
                                --environment $ANYPOINT_ENV \
                                --applicationName mule-trading-app \
                                --runtime 4.9.0 \
                                --workerSize 0.1 \
                                --workers 1 \
                                --region us-east-1 \
                                --property "mule.env=prod" \
                                --property "DB_PASSWORD=$CH_DB_PASSWORD" \
                                --autoStart \
                                target/*.jar
                            
                            # Wait for deployment
                            sleep 60
                            
                            # Verify deployment
                            anypoint-cli runtime-mgr cloudhub-application describe \
                                --environment $ANYPOINT_ENV \
                                mule-trading-app
                        '''
                    }
                }
            }
        }
        ================== END CLOUDHUB ALTERNATIVE ================== */
    }
    
    post {
        always {
            echo "üßπ Cleaning up workspace..."
            
            // Clean up Docker images to save space
            sh '''
                docker image prune -f || echo "Docker cleanup failed"
                docker system prune -f || echo "Docker system cleanup failed"
            '''
            
            // Archive logs
            archiveArtifacts artifacts: 'target/logs/**/*', allowEmptyArchive: true
        }
        
        success {
            echo "‚úÖ Pipeline completed successfully!"
            
            // Send success notification
            script {
                if (env.BRANCH_NAME == 'main') {
                    try {
                        slackSend(
                            channel: '#deployments',
                            color: 'good',
                            message: """
üöÄ *Mule Trading App Deployed Successfully!*
‚Ä¢ Build: #${env.BUILD_NUMBER}
‚Ä¢ Branch: ${env.BRANCH_NAME}
‚Ä¢ Commit: ${env.GIT_COMMIT_SHORT}
‚Ä¢ Image: ${env.FULL_IMAGE_NAME}
‚Ä¢ MUnit Coverage: ‚â•80% ‚úÖ
‚Ä¢ Duration: ${currentBuild.durationString}
                            """
                        )
                    } catch (Exception e) {
                        echo "Slack notification failed: ${e.message}"
                    }
                }
            }
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            
            // Send failure notification
            try {
                slackSend(
                    channel: '#deployments',
                    color: 'danger',
                    message: """
‚ùå *Mule Trading App Pipeline Failed!*
‚Ä¢ Build: #${env.BUILD_NUMBER}
‚Ä¢ Branch: ${env.BRANCH_NAME}
‚Ä¢ Stage: ${env.STAGE_NAME}
‚Ä¢ Check: ${env.BUILD_URL}
                    """
                )
            } catch (Exception e) {
                echo "Slack notification failed: ${e.message}"
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
        }
    }
}
