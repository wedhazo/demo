# Simple Node.js app to simulate Mule API for Kubernetes demo
FROM node:18-alpine

WORKDIR /app

# Create a simple Express server that simulates the Mule API
RUN npm init -y && npm install express pg

# Copy application files
COPY <<EOF package.json
{
  "name": "mule-api-simulator",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.0"
  }
}
EOF

COPY <<EOF server.js
const express = require('express');
const { Pool } = require('pg');

const app = express();
const port = 8081;

// Database configuration from environment variables
const pool = new Pool({
  host: process.env.DB_HOST || 'postgres-dev.mule-dev.svc.cluster.local',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'ft_trading',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'beriha@123KB!'
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'healthy', environment: process.env.MULE_ENV || 'dev' });
});

// Main API endpoint - simulates the Mule /kb endpoint
app.get('/kb', async (req, res) => {
  try {
    console.log(\`[\${new Date().toISOString()}] API call received in \${process.env.MULE_ENV || 'dev'} environment\`);
    
    const query = \`
      SELECT symbol, timestamp, open_price, high_price, low_price, close_price, volume
      FROM market_data 
      WHERE symbol = 'NVDA' 
      ORDER BY timestamp DESC 
      LIMIT 10
    \`;
    
    const result = await pool.query(query);
    
    console.log(\`[\${new Date().toISOString()}] Query executed successfully, returned \${result.rows.length} rows\`);
    
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(\`[\${new Date().toISOString()}] Database error:\`, error);
    res.status(500).json({ 
      error: 'Database connection failed', 
      message: error.message,
      environment: process.env.MULE_ENV || 'dev'
    });
  }
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({ 
    message: 'Mule Trading API Simulator', 
    environment: process.env.MULE_ENV || 'dev',
    endpoints: ['/kb', '/health']
  });
});

app.listen(port, '0.0.0.0', () => {
  console.log(\`[\${new Date().toISOString()}] Mule API Simulator running on port \${port}\`);
  console.log(\`[\${new Date().toISOString()}] Environment: \${process.env.MULE_ENV || 'dev'}\`);
  console.log(\`[\${new Date().toISOString()}] Database: \${process.env.DB_HOST || 'postgres-dev'}:\${process.env.DB_PORT || '5432'}/\${process.env.DB_NAME || 'ft_trading'}\`);
});
EOF

# Install dependencies
RUN npm install

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8081/health || exit 1

EXPOSE 8081

CMD ["npm", "start"]
